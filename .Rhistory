label = "Choose a factor:",
choices = selected_abiotics),
checkboxGroupInput(inputId = "species_show",
label = "Chose species to show:",
choiceNames = species_list,
choiceValues = species_list)
),
mainPanel(
plotOutput("plot", width = "100%", height = 400),
verbatimTextOutput("txt")
)
)
),
server = function(input, output) {
output$txt <- "Suitable species or combinations"
output$txt <- renderText(possible_combi, sep = "\n")
output$plot <- renderPlot({
species_abiotics_df_sub <- species_abiotics_df %>%
filter(species %in% input$species_show)
ggplot(species_abiotics_df_sub, aes(x = species_abiotics_df_sub[,input$Factor], fill = species))+
geom_density(alpha = 0.4) +
xlab(names(selected_abiotics[which(selected_abiotics %in%
input$Factor)]))+
geom_vline(xintercept =  user_param_syst[,input$Factor])
})
}
)
}
system_compatibility_app2(hv_intersection_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list)
system_compatibility_app2 <- function(hv_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list){
selected_abiotics <- as.list(colnames(abiotics_df[,-(1:2)]))
names(selected_abiotics)  <- c("Annual mean temperature (°C*10)", "Maximum temperature of the warmest month (°C*10)", "Minimum temperature of the coldest month (°C*10)", "Mean temperature of the driest quarter (°C*10)", "Temperature seasonnality", "Temperature annual range", "Maximum pH of the soil (*10)", "Average elevation (meters)","Average slope", "Average flow", "Minimum flow", "Maximum flow","Solar radiation", "Water vapor pressure", "Annual precipitations", "Precipitation of the wettest month", "Precipitation of the driest month","Precipitation seasonnality","Daylength annual min","Daylength annual max", "Daylength annual range")
possible_combi <- c()
for (i in 1:length(hv_list@HVList)){
test <- hypervolume_inclusion_test(hv_list[[i]], points=transpose(as.data.frame(user_param_rescaled)), fast.or.accurate = "accurate")
if (test == TRUE){
possible_combi <- c(possible_combi, hv_list[[i]]@Name)
}
}
if (length(possible_combi)==0){
stop("No species or combination can be reared in the system")
}
#############################################################################
species_list_possible <- c()
for (i in 1:length(possible_combi)){
for (j in 1:length(species_list)){
if (grepl(species_list[j],possible_combi[i])){
species_list_possible <- c(species_list_possible, species_list[j])
}
}
}
species_list_possible <- unique(species_list_possible)
#############################################################################
shinyApp(ui = fluidPage(
titlePanel("Species density"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Factor",
label = "Choose a factor:",
choices = selected_abiotics),
checkboxGroupInput(inputId = "species_show",
label = "Chose species to show:",
choiceNames = species_list,
choiceValues = species_list)
),
mainPanel(
plotOutput("plot", width = "100%", height = 400),
verbatimTextOutput("txt")
)
)
),
server = function(input, output) {
output$txt <- renderText("Suitable species or combinations")
output$txt <- renderText(possible_combi, sep = "\n")
output$plot <- renderPlot({
species_abiotics_df_sub <- species_abiotics_df %>%
filter(species %in% input$species_show)
ggplot(species_abiotics_df_sub, aes(x = species_abiotics_df_sub[,input$Factor], fill = species))+
geom_density(alpha = 0.4) +
xlab(names(selected_abiotics[which(selected_abiotics %in%
input$Factor)]))+
geom_vline(xintercept =  user_param_syst[,input$Factor])
})
}
)
}
system_compatibility_app2(hv_intersection_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list)
system_compatibility_app2 <- function(hv_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list){
selected_abiotics <- as.list(colnames(abiotics_df[,-(1:2)]))
names(selected_abiotics)  <- c("Annual mean temperature (°C*10)", "Maximum temperature of the warmest month (°C*10)", "Minimum temperature of the coldest month (°C*10)", "Mean temperature of the driest quarter (°C*10)", "Temperature seasonnality", "Temperature annual range", "Maximum pH of the soil (*10)", "Average elevation (meters)","Average slope", "Average flow", "Minimum flow", "Maximum flow","Solar radiation", "Water vapor pressure", "Annual precipitations", "Precipitation of the wettest month", "Precipitation of the driest month","Precipitation seasonnality","Daylength annual min","Daylength annual max", "Daylength annual range")
possible_combi <- c()
for (i in 1:length(hv_list@HVList)){
test <- hypervolume_inclusion_test(hv_list[[i]], points=transpose(as.data.frame(user_param_rescaled)), fast.or.accurate = "accurate")
if (test == TRUE){
possible_combi <- c(possible_combi, hv_list[[i]]@Name)
}
}
if (length(possible_combi)==0){
stop("No species or combination can be reared in the system")
}
#############################################################################
species_list_possible <- c()
for (i in 1:length(possible_combi)){
for (j in 1:length(species_list)){
if (grepl(species_list[j],possible_combi[i])){
species_list_possible <- c(species_list_possible, species_list[j])
}
}
}
species_list_possible <- unique(species_list_possible)
#############################################################################
shinyApp(ui = fluidPage(
titlePanel("Species density"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Factor",
label = "Choose a factor:",
choices = selected_abiotics),
checkboxGroupInput(inputId = "species_show",
label = "Chose species to show:",
choiceNames = species_list,
choiceValues = species_list)
),
mainPanel(
plotOutput("plot", width = "100%", height = 400),
verbatimTextOutput("txt")
)
)
),
server = function(input, output) {
output$txt <- renderText("Suitable species or combinations")
output$txt <- renderText(possible_combi, sep = "\n")
output$plot <- renderPlot({
species_abiotics_df_sub <- species_abiotics_df %>%
filter(species %in% input$species_show)
ggplot(species_abiotics_df_sub, aes(x = species_abiotics_df_sub[,input$Factor], fill = species))+
geom_density(alpha = 0.4) +
xlab(names(selected_abiotics[which(selected_abiotics %in%
input$Factor)]))+
geom_vline(xintercept =  user_param_syst[,input$Factor])
})
}
)
}
########################################################################################
#IF MONOCULTURE FOR UNKNOWN SYSTEM
system_compatibility_app2(hv_list, abiotics_df, user_param_syst, user_param_rescaled,species_abiotics_df, species_list )
system_compatibility_app2 <- function(hv_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list){
)
system_compatibility_app2 <- function(hv_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list){
selected_abiotics <- as.list(colnames(abiotics_df[,-(1:2)]))
names(selected_abiotics)  <- c("Annual mean temperature (°C*10)", "Maximum temperature of the warmest month (°C*10)", "Minimum temperature of the coldest month (°C*10)", "Mean temperature of the driest quarter (°C*10)", "Temperature seasonnality", "Temperature annual range", "Maximum pH of the soil (*10)", "Average elevation (meters)","Average slope", "Average flow", "Minimum flow", "Maximum flow","Solar radiation", "Water vapor pressure", "Annual precipitations", "Precipitation of the wettest month", "Precipitation of the driest month","Precipitation seasonnality","Daylength annual min","Daylength annual max", "Daylength annual range")
possible_combi <- c()
for (i in 1:length(hv_list@HVList)){
test <- hypervolume_inclusion_test(hv_list[[i]], points=transpose(as.data.frame(user_param_rescaled)), fast.or.accurate = "accurate")
if (test == TRUE){
possible_combi <- c(possible_combi, hv_list[[i]]@Name)
}
}
if (length(possible_combi)==0){
stop("No species or combination can be reared in the system")
}
#############################################################################
species_list_possible <- c()
for (i in 1:length(possible_combi)){
for (j in 1:length(species_list)){
if (grepl(species_list[j],possible_combi[i])){
species_list_possible <- c(species_list_possible, species_list[j])
}
}
}
species_list_possible <- unique(species_list_possible)
#############################################################################
shinyApp(ui = fluidPage(
titlePanel("Species density"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Factor",
label = "Choose a factor:",
choices = selected_abiotics),
checkboxGroupInput(inputId = "species_show",
label = "Chose species to show:",
choiceNames = species_list,
choiceValues = species_list)
),
mainPanel(
plotOutput("plot", width = "100%", height = 400),
verbatimTextOutput("txt")
)
)
),
server = function(input, output) {
output$txt <- renderText(paste("possible", possible_combi, sep = "\n"))
output$plot <- renderPlot({
species_abiotics_df_sub <- species_abiotics_df %>%
filter(species %in% input$species_show)
ggplot(species_abiotics_df_sub, aes(x = species_abiotics_df_sub[,input$Factor], fill = species))+
geom_density(alpha = 0.4) +
xlab(names(selected_abiotics[which(selected_abiotics %in%
input$Factor)]))+
geom_vline(xintercept =  user_param_syst[,input$Factor])
})
}
)
}
########################################################################################
#IF MONOCULTURE FOR UNKNOWN SYSTEM
system_compatibility_app2(hv_list, abiotics_df, user_param_syst, user_param_rescaled,species_abiotics_df, species_list )
system_compatibility_app2 <- function(hv_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list){
selected_abiotics <- as.list(colnames(abiotics_df[,-(1:2)]))
names(selected_abiotics)  <- c("Annual mean temperature (°C*10)", "Maximum temperature of the warmest month (°C*10)", "Minimum temperature of the coldest month (°C*10)", "Mean temperature of the driest quarter (°C*10)", "Temperature seasonnality", "Temperature annual range", "Maximum pH of the soil (*10)", "Average elevation (meters)","Average slope", "Average flow", "Minimum flow", "Maximum flow","Solar radiation", "Water vapor pressure", "Annual precipitations", "Precipitation of the wettest month", "Precipitation of the driest month","Precipitation seasonnality","Daylength annual min","Daylength annual max", "Daylength annual range")
possible_combi <- c()
for (i in 1:length(hv_list@HVList)){
test <- hypervolume_inclusion_test(hv_list[[i]], points=transpose(as.data.frame(user_param_rescaled)), fast.or.accurate = "accurate")
if (test == TRUE){
possible_combi <- c(possible_combi, hv_list[[i]]@Name)
}
}
if (length(possible_combi)==0){
stop("No species or combination can be reared in the system")
}
#############################################################################
species_list_possible <- c()
for (i in 1:length(possible_combi)){
for (j in 1:length(species_list)){
if (grepl(species_list[j],possible_combi[i])){
species_list_possible <- c(species_list_possible, species_list[j])
}
}
}
species_list_possible <- unique(species_list_possible)
#############################################################################
shinyApp(ui = fluidPage(
titlePanel("Species density"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Factor",
label = "Choose a factor:",
choices = selected_abiotics),
checkboxGroupInput(inputId = "species_show",
label = "Chose species to show:",
choiceNames = species_list,
choiceValues = species_list)
),
mainPanel(
plotOutput("plot", width = "100%", height = 400),
verbatimTextOutput("txt")
)
)
),
server = function(input, output) {
output$txt <- renderText(paste("Most probably suitable species or combinations :", possible_combi, sep = "\n"))
output$plot <- renderPlot({
species_abiotics_df_sub <- species_abiotics_df %>%
filter(species %in% input$species_show)
ggplot(species_abiotics_df_sub, aes(x = species_abiotics_df_sub[,input$Factor], fill = species))+
geom_density(alpha = 0.4) +
xlab(names(selected_abiotics[which(selected_abiotics %in%
input$Factor)]))+
geom_vline(xintercept =  user_param_syst[,input$Factor])
})
}
)
}
system_compatibility_app2(hv_intersection_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list)
system_compatibility_app2 <- function(hv_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list){
selected_abiotics <- as.list(colnames(abiotics_df[,-(1:2)]))
names(selected_abiotics)  <- c("Annual mean temperature (°C*10)", "Maximum temperature of the warmest month (°C*10)", "Minimum temperature of the coldest month (°C*10)", "Mean temperature of the driest quarter (°C*10)", "Temperature seasonnality", "Temperature annual range", "Maximum pH of the soil (*10)", "Average elevation (meters)","Average slope", "Average flow", "Minimum flow", "Maximum flow","Solar radiation", "Water vapor pressure", "Annual precipitations", "Precipitation of the wettest month", "Precipitation of the driest month","Precipitation seasonnality","Daylength annual min","Daylength annual max", "Daylength annual range")
possible_combi <- c()
for (i in 1:length(hv_list@HVList)){
test <- hypervolume_inclusion_test(hv_list[[i]], points=transpose(as.data.frame(user_param_rescaled)), fast.or.accurate = "accurate")
if (test == TRUE){
possible_combi <- c(possible_combi, hv_list[[i]]@Name)
}
}
if (length(possible_combi)==0){
stop("No species or combination can be reared in the system")
}
#############################################################################
species_list_possible <- c()
for (i in 1:length(possible_combi)){
for (j in 1:length(species_list)){
if (grepl(species_list[j],possible_combi[i])){
species_list_possible <- c(species_list_possible, species_list[j])
}
}
}
species_list_possible <- unique(species_list_possible)
#############################################################################
shinyApp(ui = fluidPage(
titlePanel("Species density"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Factor",
label = "Choose a factor:",
choices = selected_abiotics),
checkboxGroupInput(inputId = "species_show",
label = "Chose species to show:",
choiceNames = species_list,
choiceValues = species_list)
),
mainPanel(
plotOutput("plot", width = "100%", height = 400),
verbatimTextOutput("txt1"),
verbatimTextOutput("txt2")
)
)
),
server = function(input, output) {
output$txt1 <- renderText("Most probably suitable species or combinations :", sep = "\n")
output$txt2 <- renderText(possible_combi, sep = "\n")
output$plot <- renderPlot({
species_abiotics_df_sub <- species_abiotics_df %>%
filter(species %in% input$species_show)
ggplot(species_abiotics_df_sub, aes(x = species_abiotics_df_sub[,input$Factor], fill = species))+
geom_density(alpha = 0.4) +
xlab(names(selected_abiotics[which(selected_abiotics %in%
input$Factor)]))+
geom_vline(xintercept =  user_param_syst[,input$Factor])
})
}
)
}
system_compatibility_app2(hv_intersection_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list)
#10/ Calculate the volume of overlap
#_____________________________________________________________________________________________________________________
rescaled_combi_df <- get_hv_intersection_volumes(hv_list)
#11/ Run shiny app to see results
#_____________________________________________________________________________________________________________________
design_polyculture_app(rescaled_combi_df, species_abiotics_df)
devtools::install_github("GregoireButruille/FishNmix2")
install.packages("FishNmix2")
library(FishNmix2)
View(system_compatibility_app)
View(system_compatibility_app)
rm(system_compatibility_app)
library(FishNmix2)
#10/ Calculate the volume of overlap
#_____________________________________________________________________________________________________________________
rescaled_combi_df <- get_hv_intersection_volumes(hv_list)
#11/ Run shiny app to see results
#_____________________________________________________________________________________________________________________
design_polyculture_app(rescaled_combi_df, species_abiotics_df)
#10'/ Register user's parameters
#_____________________________________________________________________________________________________________________
user_param_syst <- input_user_system(abiotics_df)
#11'/ Project user's system into the PCA space
#_____________________________________________________________________________________________________________________
user_param_rescaled <- set_system(species_abiotics_df, user_param_syst)
########################################################################################
#IF MONOCULTURE FOR UNKNOWN SYSTEM
system_compatibility_app(hv_list, abiotics_df, user_param_syst, user_param_rescaled,species_abiotics_df, species_list )
View(system_compatibility_app)
########################################################################################
#IF MONOCULTURE FOR UNKNOWN SYSTEM
FishNmix2::system_compatibility_app(hv_list, abiotics_df, user_param_syst, user_param_rescaled,species_abiotics_df, species_list )
View(system_compatibility_app)
########################################################################################
#IF MONOCULTURE FOR UNKNOWN SYSTEM
FishNmix2::system_compatibility_app(hv_list, abiotics_df, user_param_syst, user_param_rescaled,species_abiotics_df, species_list )
install.packages("FishNmix2")
library(FishNmix2)
########################################################################################
#IF MONOCULTURE FOR UNKNOWN SYSTEM
system_compatibility_app(hv_list, abiotics_df, user_param_syst, user_param_rescaled,species_abiotics_df, species_list )
devtools::install_github("GregoireButruille/FishNmix2")
install.packages("FishNmix2")
devtools::install_github("GregoireButruille/FishNmix2")
library(FishNmix2)
system_compatibility_app(hv_intersection_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list)
########################################################################################
#IF MONOCULTURE FOR UNKNOWN SYSTEM
system_compatibility_app(hv_list, abiotics_df, user_param_syst, user_param_rescaled,species_abiotics_df, species_list )
########################################################################################
#IF POLYCULTURE
hv_intersection_list <- generate_intersection_hv(hv_list)
system_compatibility_app(hv_intersection_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list)
#create lists to store results (1 list per species)
for (i in 1:length(species_list)){
res_list_i <- paste0("res_list",i)
assign(res_list_i, c())
}
#generate the hypervolumes and each time store volume
for (i in 1:10){
hv_list <- generate_species_hv(species_list, pca_abiotics)
res_list1 <- c(res_list1, hv_list[[1]]@Volume)
res_list2 <- c(res_list2, hv_list[[2]]@Volume)
res_list3 <- c(res_list3, hv_list[[3]]@Volume)
res_list4 <- c(res_list4, hv_list[[4]]@Volume)
}
#generate the hypervolumes and each time store volume
for (i in 1:3){
hv_list <- generate_species_hv(species_list, pca_abiotics)
res_list1 <- c(res_list1, hv_list[[1]]@Volume)
res_list2 <- c(res_list2, hv_list[[2]]@Volume)
res_list3 <- c(res_list3, hv_list[[3]]@Volume)
res_list4 <- c(res_list4, hv_list[[4]]@Volume)
}
library(hypervolume)
library(FishNmix2)
library(svDialogs)
###########################################################################################################################################################
#### 2. Choosing the working directory
###########################################################################################################################################################
dir <- choose.dir()
setwd(dir)
###########################################################################################################################################################
#### 3. Choosing resolution
###########################################################################################################################################################
resolution <- as.numeric(dlg_list(title = "Chose resolution (arcmins)", c(10,30))$res) # The user is allowed to choose the resolution for niche characterisation and analysis.
###########################################################################################################################################################
#### 4. Downloading and cleaning occurrence data
###########################################################################################################################################################
#if already loaded
abiotics_df <- read.csv("abiotics_df_10.csv", sep=",", dec=".")
gbif_data <- read.csv("data2.csv")
gbif_data <- read.csv("data2.csv", sep=",", dec=".")
species_list <- c("Cyprinus carpio", "Perca fluviatilis", "Micropterus salmoides", "Sander lucioperca")
gbif_data <- gbif_download(species_list)
data_cl <- data_cleaning(gbif_data, minlat = -56, maxlat = 60 , minlong =-145, maxlong = 180, check.out = F)
species_df <- occ_rescaling(data_cl, minlat = -56, maxlat = 60 , minlong =-145, maxlong = 180, resolution)
#' @param hv_list a list of hypervolumes
#' @param abiotics_df data frame with abiotics data
#' @param user_param_syst user parameters
#' @param user_param_rescaled user parameters rescaled
#'
#'@importFrom data.table transpose
#' @return
#' @export
#'
#' @examples
system_compatibility_app <- function(hv_list, abiotics_df, user_param_syst, user_param_rescaled, species_abiotics_df, species_list){
selected_abiotics <- as.list(colnames(abiotics_df[,-(1:2)]))
#set abiotics names to display
names(selected_abiotics) <- c("Annual mean temperature (°C)",
"Maximum temperature of the warmest month (°C)",
"Minimum temperature of the coldest month (°C)",
"Mean temperature of the driest quarter (°C)", "Temperature seasonnality",
"Temperature annual range (°C)", "Maximum pH of the soil",
"Average elevation (meters)", "Average slope([°]*100)", "Average flow (m3.s-1)",
"Minimum flow (m3.s-1)", "Maximum flow (m3.s-1)", "Solar radiation (kJ.m-2.day-1)", "Water vapor pressure (kPa)",
"Annual precipitations (mm)", "Precipitation of the wettest month (mm)",
"Precipitation of the driest month (mm)", "Precipitation seasonnality",
"Daylength annual min (Hours)", "Daylength annual max (Hours)", "Daylength annual range (Hours)")
#############################################################################
#test system inclusion in species or combination hypervolume
possible_combi <- c()
for (i in 1:length(hv_list@HVList)){
if (length(as.data.frame(user_param_rescaled)[,1])==1){
test <- hypervolume_inclusion_test(hv_list[[i]], points=transpose(as.data.frame(user_param_rescaled)), fast.or.accurate = "accurate")
}
else{
test <- hypervolume_inclusion_test(hv_list[[i]], points=as.data.frame(user_param_rescaled), fast.or.accurate = "accurate")
}
if (test == TRUE){
possible_combi <- c(possible_combi, hv_list[[i]]@Name)
}
}
if (length(possible_combi)==0){
stop("No species or combination can be reared in the system")
}
species_list_possible <- c()
for (i in 1:length(possible_combi)){
for (j in 1:length(species_list)){
if (grepl(species_list[j],possible_combi[i])){
species_list_possible <- c(species_list_possible, species_list[j])
}
}
}
species_list_possible <- unique(species_list_possible)
#############################################################################
#divide temperatures and pH by 10
abiotics_df$annual_meanT <- abiotics_df$annual_meanT/10
abiotics_df$maxT_WM <- abiotics_df$maxT_WM/10
abiotics_df$annual_rangeT <- abiotics_df$annual_rangeT/10
abiotics_df$ph_max <- abiotics_df$ph_max/10
abiotics_df$minT_CM <- abiotics_df$minT_CM/10
abiotics_df$meanT_DQ <- abiotics_df$meanT_DQ/10
shinyApp(ui = fluidPage(
titlePanel("Species density"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Factor",
label = "Choose a factor:",
choices = selected_abiotics),
checkboxGroupInput(inputId = "species_show",
label = "Chose species to show:",
choiceNames = species_list,
choiceValues = species_list)
),
mainPanel(
plotOutput("plot", width = "100%", height = 400),
verbatimTextOutput("txt1"),
verbatimTextOutput("txt2")
)
)
),
server = function(input, output) {
output$txt1 <- renderText("Most probably suitable species or combinations :", sep = "\n")
output$txt2 <- renderText(possible_combi, sep = "\n")
output$plot <- renderPlot({
species_abiotics_df_sub <- species_abiotics_df %>%
filter(species %in% input$species_show)
ggplot(species_abiotics_df_sub, aes(x = species_abiotics_df_sub[,input$Factor], fill = species))+
geom_density(alpha = 0.4) +
xlab(names(selected_abiotics[which(selected_abiotics %in%
input$Factor)]))+
geom_vline(xintercept =  user_param_syst[,input$Factor], alpha = 0.4)
})
}
)
}
